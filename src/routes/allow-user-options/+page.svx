<script>
  import MultiSelect from '$lib'
  import { foods, languages } from '$src/options'
  import LanguageSlot from '$src/components/LanguageSlot.svelte'

  let selected_empty = []
</script>

## Allow Custom User Input

`allowUserOptions={true}` means users can enter custom options by entering text and hitting enter.

```svelte example id="foods"
<script>
  import MultiSelect from '$lib'
  import { foods } from '$src/options'

  let selected = 'üçá Grapes, üçà Melon, üçâ Watermelon, üçä Tangerine'.split(', ')
</script>

<MultiSelect
  options={foods}
  allowUserOptions={true}
  bind:selected
/>
```

<br />

## Append User Input

`allowUserOptions="append"` is similar to `true` but also adds user-entered custom options to the dropdown list. They'll remain there for re-selection should the user remove their custom option from the list of selected items.

```svelte example id="languages"
<script>
  import MultiSelect from '$lib'
  import { languages } from '$src/options'
  import LanguageSlot from '$src/components/LanguageSlot.svelte'

  let selected_append = ['Haskell', 'TypeScript']
</script>

<MultiSelect
  options={languages}
  allowUserOptions="append"
  bind:selected={selected_append}
  addOptionMsg="True polyglots can enter custom languages!"
>
  <LanguageSlot let:option {option} slot="selected" />
  <LanguageSlot let:option {option} slot="option" />
</MultiSelect>
```

<br />

## Start empty

Starting with no options and letting the user populate their selection from scratch.

```svelte example id="no-default-options"
<script>
  import MultiSelect from '$lib'

  let selected = []
</script>

{#if selected?.length > 0}
  <pre><code>selected = {JSON.stringify(selected)}</code></pre>
{/if}

<MultiSelect
  allowUserOptions="append"
  bind:selected
  noMatchingOptionsMsg=""
/>
```
